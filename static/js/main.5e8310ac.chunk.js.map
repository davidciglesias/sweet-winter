{"version":3,"sources":["components/cat.js","components/score.js","components/level.js","components/actuator.js","components/actuatorLabel.js","components/customColorButton.js","components/catstateHandler.js","App.js","serviceWorker.js","index.js","winter.svg"],"names":["Cat","react_default","a","createElement","className","transform","cx","cy","r","_ref","logo","name","react_svg","src","Score","text","value","parseInt","this","props","Component","Level","level","max","_handleClick","label","onClick","event","preventDefault","themeRed","createMuiTheme","palette","primary","red","typography","useNextVariants","themePurple","purple","themeYellow","main","themeGreen","secondary","light","contrastText","withStyles","theme","cssRoot","color","getContrastText","backgroundColor","&:hover","option","Fragment","core_styles","Button_default","disabled","enabled","variant","fullWidth","ActuatorLabel","handleMessage","CustomizedInputs","CatStateHandler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","restartInterval","clearInterval","interval","setInterval","tick","period","componentDidMount","setState","currentLevel","setTimeout","Math","random","componentWillUnmount","isTheActuatorEnabled","state","minActuatorLevel","message","targetClick","bind","assertThisInitialized","nextLevel","actuatorDecreaseLevel","minLevel","reduceLevel","maxLevel","probabilityOfIncrease","prevState","onTick","calculateScoreBasedOnLevel","prevProps","snapshot","isActuatorEnabled","actuator","components_level","actuatorLabel","time","App","scoreTick","seconds","score","console","log","Grid_default","container","spacing","alignContent","justify","item","xs","catstateHandler","actuatorDecreaseLevelCrit","actuatorCritChance","actuatorCooldownMs","cat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5e8310ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactSVG from 'react-svg'\r\n\r\nconst rEye = \r\n    <svg className=\"rightEye\">\r\n        <g transform=\"translate(100,0)\">\r\n            <circle cx=\"50\" cy=\"0\" r=\"100\"/>\r\n        </g>\r\n    </svg>\r\n\r\nconst Cat = ({logo, name}) => (\r\n    <div>\r\n        <ReactSVG src={logo}></ReactSVG>\r\n        <p>{name}</p>\r\n    </div>\r\n)\r\n\r\nexport default Cat","import React, { Component } from 'react';\r\n\r\nclass Score extends Component{\r\n\r\n    render() {\r\n        var value = parseInt(this.props.value)\r\n        var text\r\n        if(value > 1000) {\r\n            text = \"Yay!!! :) \"\r\n        }\r\n        else {\r\n            text = \"Mehhh :( \"\r\n        }\r\n        return (\r\n            <div>\r\n                <label>Score: {text + value}</label>      \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score","import React from 'react';\r\n\r\nconst Level = ({level, max}) => \r\n    (\r\n        <div>\r\n            {level > parseInt(max) ? max : level }\r\n        </div>\r\n    );\r\n\r\nexport default Level;","import React from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport classNames from 'classnames';\r\nimport {withTheme, withStyles, MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles'\r\nimport red from '@material-ui/core/colors/red'\r\nimport purple from '@material-ui/core/colors/purple'\r\n\r\nconst _handleClick = (label, onClick, event) => {\r\n    event.preventDefault();\r\n    onClick(label);\r\n};\r\n\r\nconst styles = theme => ({\r\n    cssRoot: {\r\n        color: theme.palette.getContrastText(purple[500]),\r\n        backgroundColor: purple[500],\r\n        '&:hover': {\r\n        backgroundColor: purple[700], \r\n        },\r\n    }   \r\n})\r\n\r\nconst themeRed = createMuiTheme({\r\n    palette: {\r\n      primary: red,\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\nconst themePurple = createMuiTheme({\r\n    palette: {\r\n        primary: purple,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    },\r\n    });\r\n    const themeYellow = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n        main:\"#ffcc00\",\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    },\r\n});\r\n\r\nconst themeGreen = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        // light: will be calculated from palette.primary.main,\r\n        main: '#1fa1a1',\r\n        // dark: will be calculated from palette.primary.main,\r\n        // contrastText: will be calculated to contrast with palette.primary.main\r\n      },\r\n      secondary: {\r\n        light: '#0066ff',\r\n        main: '#0044ff',\r\n        // dark: will be calculated from palette.secondary.main,\r\n        contrastText: '#ffcc00',\r\n      },\r\n  \r\n      typography: {\r\n        useNextVariants: true,\r\n      },\r\n      // error: will use the default color\r\n    },\r\n  });\r\n\r\nfunction Actuator(props) {\r\n    \r\n    var theme\r\n        \r\n    switch(props.option) {\r\n        case 'red':\r\n            theme = themeRed\r\n            break\r\n        case 'yellow':\r\n            theme = themeYellow\r\n            break\r\n        case 'purple':\r\n            theme = themeGreen\r\n            break\r\n        case 'green':\r\n            theme = themePurple\r\n            break\r\n        default:\r\n            break\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <MuiThemeProvider theme={theme}>\r\n                <Button \r\n                    disabled={!props.enabled}\r\n                    onClick={(event) => _handleClick(props.label, props.onClick, event)}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={props.cssRoot}\r\n                    fullWidth=\"true\"\r\n                >\r\n                {props.label}\r\n                </Button>\r\n            </MuiThemeProvider>\r\n        </> \r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Actuator)","import React from 'react'\r\n\r\nconst handleMessage = (text) => {\r\n    return <div>-{text}</div>\r\n}\r\n\r\nconst ActuatorLabel = ({text}) => {\r\n    return handleMessage(text)\r\n}\r\n\r\nexport default ActuatorLabel","import React from 'react';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport red from '@material-ui/core/colors/red'\r\nimport purple from '@material-ui/core/colors/purple'\r\n\r\nconst themeRed = createMuiTheme({\r\n    palette: {\r\n      primary: red,\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\nconst themePurple = createMuiTheme({\r\n    palette: {\r\n        primary: purple,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    },\r\n    });\r\n    const themeYellow = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n        main:\"#ffcc00\",\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n    },\r\n});\r\n\r\nconst themeGreen = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        // light: will be calculated from palette.primary.main,\r\n        main: '#1fa1a1',\r\n        // dark: will be calculated from palette.primary.main,\r\n        // contrastText: will be calculated to contrast with palette.primary.main\r\n      },\r\n      secondary: {\r\n        light: '#0066ff',\r\n        main: '#0044ff',\r\n        // dark: will be calculated from palette.secondary.main,\r\n        contrastText: '#ffcc00',\r\n      },\r\n  \r\n      typography: {\r\n        useNextVariants: true,\r\n      },\r\n      // error: will use the default color\r\n    },\r\n  });\r\n\r\nfunction CustomizedInputs(props) {\r\n    var theme\r\n    \r\n    switch(props.option) {\r\n        case 'red':\r\n            theme = themeRed\r\n            break\r\n        case 'yellow':\r\n            theme = themeYellow\r\n            break\r\n        case 'purple':\r\n            theme = themeGreen\r\n            break\r\n        case 'green':\r\n            theme = themePurple\r\n            break\r\n        default:\r\n            break\r\n    }\r\n  \r\n    return (\r\n      \r\n    <div>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Button variant=\"contained\" color=\"primary\">\r\n          {props.label}\r\n        </Button>\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomizedInputs;\r\n","import React, {Component} from 'react'\r\nimport Level from './level';\r\nimport Actuator from './actuator';\r\nimport ActuatorLabel from './actuatorLabel';\r\nimport CustomColorButton from './customColorButton';\r\n\r\nclass CatStateHandler extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            label: props.label,\r\n            currentLevel: 0,\r\n            message: \"\"\r\n        }\r\n        this.targetClick = this.targetClick.bind(this)\r\n    }    \r\n\r\n    interval;\r\n\r\n    reduceLevel() {\r\n        var nextLevel = this.state.currentLevel - this.props.actuatorDecreaseLevel\r\n        if(nextLevel < this.props.minLevel) nextLevel = parseInt(this.props.minLevel)\r\n        this.setState(\r\n            {\r\n                currentLevel: nextLevel,\r\n                message: \"-\" + this.props.actuatorDecreaseLevel\r\n            }\r\n        )\r\n    }\r\n\r\n    targetClick() {\r\n        this.restartInterval()\r\n        this.reduceLevel()\r\n    }\r\n\r\n    calculateScoreBasedOnLevel(level) {\r\n        return (this.props.maxLevel - level) / 100\r\n    }\r\n    \r\n    tick() {\r\n        var nextLevel = parseInt(this.state.currentLevel)\r\n        if(this.state.currentLevel < this.props.maxLevel && Math.random() <= this.props.probabilityOfIncrease/100){\r\n            this.setState(\r\n                (prevState) => { \r\n                    nextLevel = parseInt(prevState.currentLevel) + 1\r\n                    return {currentLevel: nextLevel }\r\n                }\r\n            )\r\n        }\r\n        this.props.onTick(this.calculateScoreBasedOnLevel(nextLevel))\r\n    }\r\n\r\n    restartInterval = () => {\r\n        clearInterval(this.interval)\r\n        this.interval = setInterval(() => {\r\n            this.tick()\r\n        }, this.props.period);\r\n      }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            currentLevel: 0\r\n        })\r\n        setTimeout(this.restartInterval(), Math.random() * 500)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n      clearInterval(this.interval)\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        \r\n    }\r\n\r\n    isTheActuatorEnabled = () => {\r\n        return this.state.currentLevel >= this.props.minActuatorLevel\r\n    }\r\n\r\n    render() {\r\n       \r\n        const isActuatorEnabled = this.isTheActuatorEnabled()\r\n\r\n        return (\r\n            <>\r\n                <Actuator \r\n                    label={this.props.label} \r\n                    enabled={isActuatorEnabled} \r\n                    onClick={this.targetClick}\r\n                    color={this.props.color}\r\n                    option={this.props.theme}\r\n                />\r\n                <Level \r\n                    level={this.state.currentLevel}\r\n                    max={this.props.maxLevel}\r\n                />\r\n                <ActuatorLabel\r\n                    time=\"1000\"\r\n                    text={this.state.message}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CatStateHandler","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './winter.svg';\nimport Cat from './components/cat';\nimport Score from './components/score'\nimport CatStateHandler from './components/catstateHandler';\nimport Grid from '@material-ui/core/Grid'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.targetClick = this.targetClick.bind(this);\n    this.scoreTick = this.scoreTick.bind(this);\n    this.state = (\n      { \n        seconds: 0,\n        score: 0\n      }\n    );\n  }\n\n  scoreTick(level) {\n    this.setState((state) =>{ return { score: state.score + level}})\n  }\n\n  targetClick(label) {\n    console.log(label + \" was clicked!\");\n  }\n\n  render() {\n    return (\n      \n        <div className=\"App\">\n          <header className=\"App-header\">\n          <Grid container spacing={0} alignContent=\"space-between\" justify=\"space-between\">\n              <Grid item xs={3}>\n                <CatStateHandler \n                  onTick={this.scoreTick}\n                  period=\"1000\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Clean the poop!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"10\"\n                  theme={'green'}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"1000\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Play with me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"20\"\n                  theme={'yellow'}\n                />\n              </Grid>\n            </Grid>\n            <Grid container alignContent=\"flex-center\" justify=\"center\">\n              <Grid item xs={12}>\n                <Score value={this.state.score}/>\n                <Cat logo={logo} name=\"Winter\"/>\n              </Grid>\n            </Grid>\n            <Grid container spacing={0} alignContent=\"space-between\" justify=\"space-between\">\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"300\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Feed me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"30\"\n                  theme={'red'}\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"300\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Pet me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"10\"\n                  theme={'purple'}\n                />\n              </Grid>\n            </Grid>\n            \n          </header>\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/winter.23d56473.svg\";"],"sourceRoot":""}