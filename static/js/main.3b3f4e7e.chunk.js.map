{"version":3,"sources":["components/actuator.js","components/level.js","App.js","serviceWorker.js","index.js","winter.svg"],"names":["Actuator","_ref","label","onClick","react_default","a","createElement","event","preventDefault","_handleClick","Level","level","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","interval","setInterval","setState","time","Date","toLocaleTimeString","console","log","state","componentWillUnmount","clearInterval","targetClick","bind","assertThisInitialized","className","src","logo","alt","actuator","components_level","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4RAWeA,EAHE,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,QAAT,OACbC,EAAAC,EAAAC,cAAA,UAAQH,QAAS,SAACI,GAAD,OANA,SAACL,EAAOC,EAASI,GAClCA,EAAMC,iBACNL,EAAQD,GAIoBO,CAAaP,EAAOC,EAASI,KAASL,ICAvDQ,EAPD,SAAAT,GAAA,IAAEU,EAAFV,EAAEU,MAAF,OAENP,EAAAC,EAAAC,cAAA,WACKK,IC+CEC,cA7Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,kBAAoB,WAClBP,EAAKQ,SAAWC,YAAY,WAC1BT,EAAKU,SAAS,CAAEC,MAAM,IAAIC,MAAOC,uBACjCC,QAAQC,IAAIf,EAAKgB,MAAML,OACtB,MAbcX,EAiBnBiB,qBAAuB,WACrBC,cAAclB,EAAKQ,WAhBnBR,EAAKmB,YAAcnB,EAAKmB,YAAYC,KAAjBnB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAD,KAFFA,2EAKPZ,GACV0B,QAAQC,IAAI3B,EAAQ,kDAiBpB,OACEE,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,UAAQ8B,UAAU,cAChBhC,EAAAC,EAAAC,cAAA,OAAK+B,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCnC,EAAAC,EAAAC,cAAA,oCAGAF,EAAAC,EAAAC,cAACkC,EAAD,CAAUtC,MAAM,SAASC,QAASc,KAAKgB,cACvC7B,EAAAC,EAAAC,cAACmC,EAAD,CAAO9B,MAAM,MACbP,EAAAC,EAAAC,cAACkC,EAAD,CAAUtC,MAAM,MAAMC,QAASc,KAAKgB,cACpC7B,EAAAC,EAAAC,cAACkC,EAAD,CAAUtC,MAAM,OAAOC,QAASc,KAAKgB,cACrC7B,EAAAC,EAAAC,cAACkC,EAAD,CAAUtC,MAAM,QAAQC,QAASc,KAAKgB,uBAnC9BS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3b3f4e7e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst _handleClick = (label, onClick, event) => {\r\n    event.preventDefault();\r\n    onClick(label);\r\n};\r\n\r\nconst Actuator = ({label, onClick}) => \r\n    <button onClick={(event) => _handleClick(label, onClick, event)}>{label}</button> \r\n\r\nexport default Actuator;","import React from 'react';\r\n\r\nconst Level = ({level}) => \r\n    (\r\n        <div>\r\n            {level}\r\n        </div>\r\n    );\r\n\r\nexport default Level;","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './winter.svg';\nimport Actuator from \"./components/actuator\";\nimport Level from \"./components/level\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.targetClick = this.targetClick.bind(this);\n  }\n\n  targetClick(label) {\n    console.log(label + \" was clicked!\");\n  }\n\n  componentDidMount = () => {\n    this.interval = setInterval(() => {\n      this.setState({ time: new Date().toLocaleTimeString()});\n      console.log(this.state.time);\n    }, 1000);\n    \n  }\n  \n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            This is Winter the Cat!\n          </p>\n          <Actuator label=\"potato\" onClick={this.targetClick}/>\n          <Level level=\"5\"/>\n          <Actuator label=\"raf\" onClick={this.targetClick}/>\n          <Actuator label=\"nara\" onClick={this.targetClick}/>\n          <Actuator label=\"asfsa\" onClick={this.targetClick}/>\n        </header>\n      </div>\n    );\n  }\n\n  \n  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/winter.c6b434c1.svg\";"],"sourceRoot":""}