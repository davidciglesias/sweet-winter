{"version":3,"sources":["components/cat.js","components/score.js","components/level.js","components/actuator.js","components/actuatorLabel.js","components/catstateHandler.js","App.js","serviceWorker.js","index.js","winter.svg"],"names":["Cat","_ref","logo","name","react_default","a","createElement","react_svg","color","src","Score","parseInt","this","props","value","Component","Level","level","max","styled","button","_templateObject","withTheme","Button_default","disabled","enabled","onClick","event","label","preventDefault","_handleClick","variant","ActuatorLabel","text","className","handleMessage","CatStateHandler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","restartInterval","clearInterval","interval","setInterval","tick","period","componentDidMount","setState","currentLevel","setTimeout","Math","random","componentWillUnmount","isTheActuatorEnabled","state","minActuatorLevel","message","targetClick","bind","assertThisInitialized","nextLevel","actuatorDecreaseLevel","minLevel","reduceLevel","maxLevel","probabilityOfIncrease","prevState","onTick","calculateScoreBasedOnLevel","prevProps","snapshot","isActuatorEnabled","actuator","components_level","components_actuatorLabel","time","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","App","scoreTick","seconds","score","console","log","styles","cat","Grid_default","container","spacing","item","xs","catstateHandler","actuatorDecreaseLevelCrit","actuatorCritChance","actuatorCooldownMs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.324983d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactSVG from 'react-svg'\r\n\r\nconst Cat = ({logo, name}) => (\r\n    <div>\r\n        <ReactSVG color=\"#ffffff\" src={logo}></ReactSVG>\r\n        <p>{name}</p>\r\n    </div>\r\n)\r\n\r\nexport default Cat","import React, { Component } from 'react';\r\n\r\nclass Score extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label>Score: {parseInt(this.props.value)}</label>      \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score","import React from 'react';\r\n\r\nconst Level = ({level, max}) => \r\n    (\r\n        <div>\r\n            {level > parseInt(max) ? max : level }\r\n        </div>\r\n    );\r\n\r\nexport default Level;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport Button from '@material-ui/core/Button'\r\nimport {withTheme} from '@material-ui/core/styles'\r\nimport { checkPropTypes } from 'prop-types';\r\n\r\nconst StyledButton = styled.button`\r\n    background-color: red;\r\n    font-size: 2vh;\r\n    margin: 0.5vmin;\r\n    padding: 1vmin 2vh;\r\n    border: 0.1vmin solid black;\r\n`;\r\n\r\nconst _handleClick = (label, onClick, event) => {\r\n    event.preventDefault();\r\n    onClick(label);\r\n};\r\n\r\nconst Actuator = (props) => \r\n    <Button \r\n        disabled={props.enabled ? \"\" : \"disabled\"}\r\n        onClick={(event) => _handleClick(props.label, props.onClick, event)}\r\n        variant=\"raised\"\r\n        color=\"primary\"\r\n    >\r\n        {props.label}\r\n    </Button> \r\n\r\nexport default withTheme()(Actuator);","import React from 'react'\r\nimport './actuatorLabel.css'\r\n\r\nconst handleMessage = (text) => {\r\n    return <div className=\"labelOff\">{text}</div>\r\n}\r\n\r\nconst ActuatorLabel = ({text}) => {\r\n    return handleMessage(text)\r\n}\r\n\r\nexport default ActuatorLabel","import React, {Component} from 'react'\r\nimport Level from './level';\r\nimport Actuator from './actuator';\r\nimport ActuatorLabel from './actuatorLabel';\r\n\r\nclass CatStateHandler extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            label: props.label,\r\n            currentLevel: 0,\r\n            message: \"\"\r\n        }\r\n        this.targetClick = this.targetClick.bind(this)\r\n    }    \r\n\r\n    interval;\r\n\r\n    reduceLevel() {\r\n        var nextLevel = this.state.currentLevel - this.props.actuatorDecreaseLevel\r\n        if(nextLevel < this.props.minLevel) nextLevel = parseInt(this.props.minLevel)\r\n        this.setState(\r\n            {\r\n                currentLevel: nextLevel,\r\n                message: \"-\" + this.props.actuatorDecreaseLevel\r\n            }\r\n        )\r\n    }\r\n\r\n    targetClick() {\r\n        this.restartInterval()\r\n        this.reduceLevel()\r\n    }\r\n\r\n    calculateScoreBasedOnLevel(level) {\r\n        return (this.props.maxLevel - level) / 100\r\n    }\r\n    \r\n    tick() {\r\n        var nextLevel = parseInt(this.state.currentLevel)\r\n        if(this.state.currentLevel < this.props.maxLevel && Math.random() <= this.props.probabilityOfIncrease/100){\r\n            this.setState(\r\n                (prevState) => { \r\n                    nextLevel = parseInt(prevState.currentLevel) + 1\r\n                    return {currentLevel: nextLevel }\r\n                }\r\n            )\r\n        }\r\n        this.props.onTick(this.calculateScoreBasedOnLevel(nextLevel))\r\n    }\r\n\r\n    restartInterval = () => {\r\n        clearInterval(this.interval)\r\n        this.interval = setInterval(() => {\r\n            this.tick()\r\n        }, this.props.period);\r\n      }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            currentLevel: 0\r\n        })\r\n        setTimeout(this.restartInterval(), Math.random() * 500)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n      clearInterval(this.interval)\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        \r\n    }\r\n\r\n    isTheActuatorEnabled = () => {\r\n        return this.state.currentLevel >= this.props.minActuatorLevel\r\n    }\r\n\r\n    render() {\r\n       \r\n        const isActuatorEnabled = this.isTheActuatorEnabled()\r\n\r\n        return (\r\n            <div>\r\n                <Actuator \r\n                    label={this.props.label} \r\n                    enabled={isActuatorEnabled} \r\n                    onClick={this.targetClick}\r\n                />\r\n                <Level \r\n                    level={this.state.currentLevel}\r\n                    max={this.props.maxLevel}\r\n                />\r\n                <ActuatorLabel\r\n                    time=\"1000\"\r\n                    text={this.state.message}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CatStateHandler","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './winter.svg';\nimport Cat from './components/cat';\nimport Score from './components/score'\nimport CatStateHandler from './components/catstateHandler';\nimport Grid from '@material-ui/core/Grid'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#1fa1a1'\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // error: will use the default color\n  },\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.targetClick = this.targetClick.bind(this);\n    this.scoreTick = this.scoreTick.bind(this);\n    this.state = (\n      { \n        seconds: 0,\n        score: 0\n      }\n    );\n  }\n\n  scoreTick(level) {\n    this.setState((state) =>{ return { score: state.score + level}})\n  }\n\n  targetClick(label) {\n    console.log(label + \" was clicked!\");\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Score value={this.state.score}/>\n            <Cat logo={logo} name=\"Winter\"/>\n            <Grid container spacing={10}>\n              <Grid item xs={3}>\n                <CatStateHandler \n                  onTick={this.scoreTick}\n                  period=\"1000\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Clean the poop!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"10\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"1000\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Play with me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"20\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"300\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Feed me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"30\"\n                />\n              </Grid>\n              <Grid item xs={3}>\n                <CatStateHandler\n                  onTick={this.scoreTick} \n                  period=\"300\"\n                  minLevel=\"0\"\n                  maxLevel=\"500\"\n                  label=\"Pet me!\"\n                  minActuatorLevel=\"1\"\n                  actuatorDecreaseLevel=\"10\"\n                  actuatorDecreaseLevelCrit=\"30\"\n                  actuatorCritChance=\"50\"\n                  actuatorCooldownMs=\"500\"\n                  onClick={this.targetClick}\n                  probabilityOfIncrease=\"10\"\n                />\n              </Grid>\n            </Grid>\n            \n          </header>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/winter.23d56473.svg\";"],"sourceRoot":""}