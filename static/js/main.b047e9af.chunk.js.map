{"version":3,"sources":["components/cat.js","components/score.js","components/level.js","components/actuator.js","components/catstateHandler.js","App.js","serviceWorker.js","index.js","winter.svg"],"names":["Cat","_ref","logo","name","react_default","a","createElement","src","className","alt","Score","parseInt","this","props","value","Component","Level","level","max","Actuator","enabled","label","onClick","Button_default","variant","disabled","event","preventDefault","_handleClick","CatStateHandler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","restartInterval","clearInterval","interval","setInterval","tick","period","componentDidMount","setState","currentLevel","setTimeout","Math","random","componentWillUnmount","isTheActuatorEnabled","state","minActuatorLevel","targetClick","bind","assertThisInitialized","nextLevel","actuatorDecreaseLevel","minLevel","reduceLevel","maxLevel","probabilityOfIncrease","prevState","onTick","calculateScoreBasedOnLevel","prevProps","snapshot","isActuatorEnabled","actuator","components_level","App","scoreTick","seconds","score","console","log","cat","catstateHandler","actuatorDecreaseLevelCrit","actuatorCritChance","actuatorCooldownMs","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b047e9af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cat = ({logo, name}) => (\r\n    <div>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>{name}</p>\r\n    </div>\r\n)\r\n\r\nexport default Cat","import React, { Component } from 'react';\r\n\r\nclass Score extends Component{\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label>Score: {parseInt(this.props.value)}</label>      \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score","import React from 'react';\r\n\r\nconst Level = ({level, max}) => \r\n    (\r\n        <div>\r\n            {level > parseInt(max) ? max : level }\r\n        </div>\r\n    );\r\n\r\nexport default Level;","import React from 'react';\r\nimport Button from '@material-ui/core/Button'\r\n\r\n\r\nconst _handleClick = (label, onClick, event) => {\r\n    event.preventDefault();\r\n    onClick(label);\r\n};\r\n\r\nconst Actuator = ({enabled, label, onClick}) => \r\n    <Button variant=\"contained\" disabled={enabled ? \"\" : \"disabled\"} onClick={(event) => _handleClick(label, onClick, event)}>{label}</Button> \r\n\r\nexport default Actuator;","import React, {Component} from 'react'\r\nimport Level from './level';\r\nimport Actuator from './actuator';\r\n\r\nclass CatStateHandler extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            label: props.label,\r\n            currentLevel: 0\r\n        }\r\n        this.targetClick = this.targetClick.bind(this)\r\n    }    \r\n\r\n    interval;\r\n\r\n    reduceLevel() {\r\n        var nextLevel = this.state.currentLevel - this.props.actuatorDecreaseLevel\r\n        if(nextLevel < this.props.minLevel) nextLevel = parseInt(this.props.minLevel)\r\n        this.setState({currentLevel: nextLevel})\r\n    }\r\n\r\n    targetClick() {\r\n        this.restartInterval()\r\n        this.reduceLevel()\r\n    }\r\n\r\n    calculateScoreBasedOnLevel(level) {\r\n        return (this.props.maxLevel - level) / 100\r\n    }\r\n    \r\n    tick() {\r\n        var nextLevel = parseInt(this.state.currentLevel)\r\n        if(this.state.currentLevel < this.props.maxLevel && Math.random() <= this.props.probabilityOfIncrease/100){\r\n            this.setState(\r\n                (prevState) => { \r\n                    nextLevel = parseInt(prevState.currentLevel) + 1\r\n                    return {currentLevel: nextLevel }\r\n                }\r\n            )\r\n        }\r\n        this.props.onTick(this.calculateScoreBasedOnLevel(nextLevel))\r\n    }\r\n\r\n    restartInterval = () => {\r\n        clearInterval(this.interval)\r\n        this.interval = setInterval(() => {\r\n            this.tick()\r\n        }, this.props.period);\r\n      }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            currentLevel: 0\r\n        })\r\n        setTimeout(this.restartInterval(), Math.random() * 500)\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n      clearInterval(this.interval)\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        \r\n    }\r\n\r\n    isTheActuatorEnabled = () => {\r\n        return this.state.currentLevel >= this.props.minActuatorLevel\r\n    }\r\n\r\n    render() {\r\n       \r\n        const isActuatorEnabled = this.isTheActuatorEnabled()\r\n\r\n        return (\r\n            <div>\r\n                <Actuator \r\n                    label={this.props.label} \r\n                    enabled={isActuatorEnabled} \r\n                    onClick={this.targetClick}\r\n                />\r\n                <Level \r\n                    level={this.state.currentLevel}\r\n                    max={this.props.maxLevel}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CatStateHandler","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './winter.svg';\nimport Cat from './components/cat';\nimport Score from './components/score'\nimport CatStateHandler from './components/catstateHandler';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.targetClick = this.targetClick.bind(this);\n    this.scoreTick = this.scoreTick.bind(this);\n    this.state = (\n      { \n        seconds: 0,\n        score: 0\n      }\n    );\n  }\n\n  scoreTick(level) {\n    this.setState((state) =>{ return { score: state.score + level}})\n  }\n\n  targetClick(label) {\n    console.log(label + \" was clicked!\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Score value={this.state.score}/>\n          <Cat logo={logo} name=\"Winter\"/>\n          <CatStateHandler \n            onTick={this.scoreTick}\n            period=\"300\"\n            minLevel=\"0\"\n            maxLevel=\"500\"\n            label=\"Clean the poop!\"\n            minActuatorLevel=\"3\"\n            actuatorDecreaseLevel=\"10\"\n            actuatorDecreaseLevelCrit=\"30\"\n            actuatorCritChance=\"50\"\n            actuatorCooldownMs=\"500\"\n            onClick={this.targetClick}\n            probabilityOfIncrease=\"1\"\n          />\n          <CatStateHandler\n            onTick={this.scoreTick} \n            period=\"300\"\n            minLevel=\"0\"\n            maxLevel=\"500\"\n            label=\"Play with me!\"\n            minActuatorLevel=\"3\"\n            actuatorDecreaseLevel=\"10\"\n            actuatorDecreaseLevelCrit=\"30\"\n            actuatorCritChance=\"50\"\n            actuatorCooldownMs=\"500\"\n            onClick={this.targetClick}\n            probabilityOfIncrease=\"20\"\n          />\n          <CatStateHandler\n            onTick={this.scoreTick} \n            period=\"300\"\n            minLevel=\"0\"\n            maxLevel=\"500\"\n            label=\"Feed me!\"\n            minActuatorLevel=\"3\"\n            actuatorDecreaseLevel=\"10\"\n            actuatorDecreaseLevelCrit=\"30\"\n            actuatorCritChance=\"50\"\n            actuatorCooldownMs=\"500\"\n            onClick={this.targetClick}\n            probabilityOfIncrease=\"30\"\n          />\n          <CatStateHandler\n            onTick={this.scoreTick} \n            period=\"300\"\n            minLevel=\"0\"\n            maxLevel=\"500\"\n            label=\"Pet me!\"\n            minActuatorLevel=\"3\"\n            actuatorDecreaseLevel=\"10\"\n            actuatorDecreaseLevelCrit=\"30\"\n            actuatorCritChance=\"50\"\n            actuatorCooldownMs=\"500\"\n            onClick={this.targetClick}\n            probabilityOfIncrease=\"10\"\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/winter.c6b434c1.svg\";"],"sourceRoot":""}